# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
global !p
def index():
	return os.path.basename(vim.current.buffer.name) == 'index.md'
endglobal

extends markdown

snippet frontmatter "Jekyl Note FrontMatter" bA
---
layout: note
---

$0
endsnippet

snippet indexfront "Jekyl Index FrontMatter" bA
---
layout: index
title: $1
---

$0
endsnippet

#Funciona pero no hace minúsculas ni toma ascii (áéíóú)
context "index()"
snippet note "new index note entry" Ae
[${0:Note name}](${0/[^A-z0-9]+/-/gi}.md)
endsnippet
# Este debería funcionar mejor, pero no funcian el \L \E ni la opción a
#[${0:note name}](${0/\w+/(?1:\L$1\E:-)/gia}.md)

context "index()"
snippet index "new index, index entry" Ae
[${0:directory name}]($0/index.md)
endsnippet
